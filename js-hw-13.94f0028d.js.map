{"mappings":"ACAA,IAAM,MAAQ,AAAA,GACH,IAAI,QAAQ,AAAC,IAChB,IAAI,EAAQ,EACN,EAAW,YAAY,OAErB,IAAU,IACV,cAAc,GACd,EAAQ,GAEhB,EAAG,EACP,GAIE,OAAS,AAAA,GAAQ,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,EAAK,EAAE,CAAC,EAE7D,MAAM,KAAM,IAAI,CAAC,QACjB,MAAM,KAAM,IAAI,CAAC,QACjB,MAAM,MAAM,IAAI,CAAC,QAIjB,IAAM,MAAQ,CACV,CAAE,KAAM,QAAS,OAAQ,CAAA,CAAK,EAC9B,CAAE,KAAM,OAAQ,OAAQ,CAAA,CAAM,EAC9B,CAAE,KAAM,OAAQ,OAAQ,CAAA,CAAK,EAC7B,CAAE,KAAM,MAAO,OAAQ,CAAA,CAAM,EAChC,CAEK,gBAAkB,CAAC,EAAU,IACxB,IAAI,QAAQ,CAAC,EAAS,KAIzB,EAHqB,EAAS,GAAG,CAAC,AAAA,GAC9B,EAAK,IAAI,GAAK,EAAW,CAAE,GAAG,CAAI,CAAE,OAAQ,CAAC,EAAK,MAAM,AAAC,EAAI,GAGrE,GAGE,QAAU,AAAA,GAAgB,QAAQ,KAAK,CAAC,GAE9C,gBAAgB,MAAO,SAAS,IAAI,CAAC,SACrC,gBAAgB,MAAO,OAAO,IAAI,CAAC,SAInC,IAAM,0BAA4B,CAAC,EAAK,IAC7B,KAAK,KAAK,CAAC,KAAK,MAAM,GAAM,CAAA,EAAM,EAAM,CAAA,EAAK,GAGlD,gBAAkB,AAAC,GACd,IAAI,QAAQ,CAAC,EAAQ,KACxB,IAAM,EAAQ,0BAA0B,IAAK,KAE7C,WAAW,KACY,KAAK,MAAM,GAAK,GAG/B,EAAQ,EAAY,EAAE,CAAE,GAExB,EAAO,EAAY,EAAE,CAE7B,EAAG,EACP,GAGE,WAAa,CAAC,EAAI,KACpB,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,EAAG,cAAc,EAAE,EAAK,EAAE,CAAC,CAC1D,EAEM,SAAW,AAAA,IACb,QAAQ,IAAI,CAAC,CAAC,6BAA6B,EAAE,EAAG,yBAAyB,CAAC,CAC9E,EAEA,gBAAgB,CAAE,GAAI,GAAI,OAAQ,GAAI,GACjC,IAAI,CAAC,YACL,KAAK,CAAC,UAEX,gBAAgB,CAAE,GAAI,GAAI,OAAQ,GAAI,GACjC,IAAI,CAAC,YACL,KAAK,CAAC,UAEX,gBAAgB,CAAE,GAAI,GAAI,OAAQ,EAAG,GAChC,IAAI,CAAC,YACL,KAAK,CAAC,UAEX,gBAAgB,CAAE,GAAI,GAAI,OAAQ,GAAI,GACjC,IAAI,CAAC,YACL,KAAK,CAAC","sources":["<anon>","src/index.js"],"sourcesContent":["const delay = (ms)=>{\n    return new Promise((resolve)=>{\n        let timer = 0;\n        const interval = setInterval(()=>{\n            timer++;\n            if (timer === ms) {\n                clearInterval(interval);\n                resolve(ms);\n            }\n        }, 1);\n    });\n};\nconst logger = (time)=>console.log(`Resolved after ${time}ms`);\ndelay(2000).then(logger);\ndelay(1000).then(logger);\ndelay(1500).then(logger);\n// 2\nconst users = [\n    {\n        name: 'Mango',\n        active: true\n    },\n    {\n        name: 'Poly',\n        active: false\n    },\n    {\n        name: 'Ajax',\n        active: true\n    },\n    {\n        name: 'Lux',\n        active: false\n    }\n];\nconst toggleUserState = (allUsers, userName)=>{\n    return new Promise((resolve, reject)=>{\n        const updatedUsers = allUsers.map((user)=>user.name === userName ? {\n                ...user,\n                active: !user.active\n            } : user);\n        resolve(updatedUsers);\n    });\n};\nconst logger2 = (updatedUsers)=>console.table(updatedUsers);\ntoggleUserState(users, 'Mango').then(logger2);\ntoggleUserState(users, 'Lux').then(logger2);\n// 3\nconst randomIntegerFromInterval = (min, max)=>{\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\nconst makeTransaction = (transaction)=>{\n    return new Promise((resolve, reject)=>{\n        const delay = randomIntegerFromInterval(200, 500);\n        setTimeout(()=>{\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) resolve(transaction.id, delay);\n            else reject(transaction.id);\n        }, delay);\n    });\n};\nconst logSuccess = (id, time)=>{\n    console.log(`Transaction ${id} processed in ${time}ms`);\n};\nconst logError = (id)=>{\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\nmakeTransaction({\n    id: 70,\n    amount: 150\n}).then(logSuccess).catch(logError);\nmakeTransaction({\n    id: 71,\n    amount: 230\n}).then(logSuccess).catch(logError);\nmakeTransaction({\n    id: 72,\n    amount: 75\n}).then(logSuccess).catch(logError);\nmakeTransaction({\n    id: 73,\n    amount: 100\n}).then(logSuccess).catch(logError);\n\n//# sourceMappingURL=js-hw-13.94f0028d.js.map\n","const delay = ms => {\r\n    return new Promise((resolve) => {\r\n        let timer = 0\r\n        const interval = setInterval(() => {\r\n            timer++\r\n            if (timer === ms) {\r\n                clearInterval(interval)\r\n                resolve(ms)\r\n            }\r\n        }, 1)\r\n    })\r\n\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(logger); \r\ndelay(1000).then(logger); \r\ndelay(1500).then(logger); \r\n\r\n// 2\r\n\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve, reject) => {\r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n        );\r\n        resolve(updatedUsers)\r\n    })\r\n}\r\n\r\nconst logger2 = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger2);\r\ntoggleUserState(users, 'Lux').then(logger2);\r\n\r\n// 3\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    return new Promise((resolve,reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n    \r\n            if (canProcess) {\r\n                resolve(transaction.id, delay);\r\n            } else {\r\n                reject(transaction.id);\r\n            }\r\n        }, delay);\r\n    })\r\n};\r\n\r\nconst logSuccess = (id, time) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"],"names":["delay","ms","Promise","resolve","timer","interval","setInterval","clearInterval","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","reject","map","user","logger2","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","setTimeout","id","logSuccess","logError","warn","amount","catch"],"version":3,"file":"js-hw-13.94f0028d.js.map"}