let delay=e=>new Promise(a=>{let o=0,r=setInterval(()=>{++o===e&&(clearInterval(r),a(e))},1)}),logger=e=>console.log(`Resolved after ${e}ms`);delay(2e3).then(logger),delay(1e3).then(logger),delay(1500).then(logger);let users=[{name:"Mango",active:!0},{name:"Poly",active:!1},{name:"Ajax",active:!0},{name:"Lux",active:!1}],toggleUserState=(e,a)=>new Promise((o,r)=>{o(e.map(e=>e.name===a?{...e,active:!e.active}:e))}),logger2=e=>console.table(e);toggleUserState(users,"Mango").then(logger2),toggleUserState(users,"Lux").then(logger2);let randomIntegerFromInterval=(e,a)=>Math.floor(Math.random()*(a-e+1)+e),makeTransaction=e=>new Promise((a,o)=>{let r=randomIntegerFromInterval(200,500);setTimeout(()=>{Math.random()>.3?a(e.id,r):o(e.id)},r)}),logSuccess=(e,a)=>{console.log(`Transaction ${e} processed in ${a}ms`)},logError=e=>{console.warn(`Error processing transaction ${e}. Please try again later.`)};makeTransaction({id:70,amount:150}).then(logSuccess).catch(logError),makeTransaction({id:71,amount:230}).then(logSuccess).catch(logError),makeTransaction({id:72,amount:75}).then(logSuccess).catch(logError),makeTransaction({id:73,amount:100}).then(logSuccess).catch(logError);
//# sourceMappingURL=js-hw-13.94f0028d.js.map
